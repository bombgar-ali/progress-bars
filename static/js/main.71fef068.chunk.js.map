{"version":3,"sources":["components/common/progressBar.js","components/common/select.js","components/common/button.js","components/buttonsGroup.js","components/progressBars.js","validation/validateEndpoint.js","components/errorPage.js","App.js","serviceWorker.js","index.js"],"names":["ProgressBar","value","maximum","isSelected","actualPercent","percentText","toFixed","textColorClass","progressColorClass","className","max","Select","dataSet","onChange","map","option","key","id","name","Button","text","onClick","style","flex","ButtonsGroup","buttons","onClickButton","button","i","toString","ProgressBars","barsData","limit","useState","selectedBar","setSelectedBar","bars","setBars","buttonsList","sort","a","b","e","currentTarget","change","updatedValue","updatedBars","bar","schema","Joi","object","array","required","items","number","min","ErrorPage","App","data","window","endpointConfig","validate","abortEarly","error","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.71fef068.chunk.js","sourcesContent":["import React from 'react';\n\nconst ProgressBar = ({ value, maximum, isSelected = false }) => {\n  const actualPercent = value / maximum;\n  const percentText = (actualPercent * 100).toFixed(2);\n  const textColorClass = actualPercent < 0.5 ? 'has-text-black' : 'has-text-white';\n  const progressColorClass = actualPercent > 1 ? 'is-danger' : 'is-link';\n\n  return (\n    <div className='progress-wrapper'>\n      <progress className={`progress is-large ${progressColorClass} ${isSelected && 'is-selected'}`} value={value} max={maximum} />\n      <p className={`progress-value ${textColorClass}`}>\n        {percentText}% ({value}/{maximum})\n      </p>\n    </div>\n  );\n};\n\nexport default ProgressBar;\n","import React from 'react';\n\nconst Select = ({ dataSet, onChange, value }) => {\n  return (\n    <div className='select is-fullwidth'>\n      <select onChange={onChange} value={value}>\n        {dataSet.map((option) => (\n          <option key={option.id} value={option.id}>\n            {option.name}\n          </option>\n        ))}\n      </select>\n    </div>\n  );\n};\n\nexport default Select;\n","import React from 'react';\n\nconst Button = ({ text, onClick }) => {\n  return (\n    <button className='button is-primary' style={{ flex: 1 }} onClick={onClick}>\n      {text}\n    </button>\n  );\n};\n\nexport default Button;\n","import React from 'react';\nimport Button from './common/button';\n\nconst ButtonsGroup = ({ buttons, onClickButton }) => {\n  return (\n    <div className='buttons'>\n      {buttons.map((button, i) => (\n        <Button key={i} text={button.toString()} onClick={onClickButton(button)} />\n      ))}\n    </div>\n  );\n};\n\nexport default ButtonsGroup;\n","import React, { useState } from 'react';\nimport ProgressBar from './common/progressBar';\nimport Select from './common/select';\nimport ButtonsGroup from './buttonsGroup';\n\nconst ProgressBars = ({ buttons, barsData, limit }) => {\n  const [selectedBar, setSelectedBar] = useState('0');\n  const [bars, setBars] = useState(barsData);\n\n  const buttonsList = [...buttons].sort((a, b) => a - b);\n\n  const handleSelectBar = (e) => {\n    setSelectedBar(e.currentTarget.value);\n  };\n\n  const handleClickButton = (change) => () => {\n    const updatedValue = bars[selectedBar].value + change >= 0 ? bars[selectedBar].value + change : 0;\n    const updatedBars = bars.map((bar) => (bar.id === selectedBar ? { ...bar, value: updatedValue } : bar));\n    setBars(updatedBars);\n  };\n\n  return (\n    <section className='section'>\n      <h1 className='title'>Progress Bars</h1>\n\n      <div className='card'>\n        <div className='card-content'>\n          {bars.map(({ id, value }) => (\n            <ProgressBar key={id} value={value} maximum={limit} isSelected={id===selectedBar}/>\n          ))}\n        </div>\n      </div>\n\n      <div className='level columns'>\n        <div className='column is-one-third'>\n          <Select dataSet={bars} onChange={handleSelectBar} value={selectedBar} />\n        </div>\n        <div className='column'>\n          <ButtonsGroup buttons={buttonsList} onClickButton={handleClickButton} />\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport default ProgressBars;\n","import Joi from '@hapi/joi';\n\nconst schema = Joi.object({\n  buttons: Joi.array().required().items(Joi.number()),\n  bars: Joi.array().required().items(Joi.number()),\n  limit: Joi.number().required().min(0),\n});\n\nexport const validateData = (data) => {\n  const options = { abortEarly: false };\n  const { error } = schema.validate(data, options);\n  if (!error) return true;\n  return false;\n};\n","import React from 'react';\n\nconst ErrorPage = () => {\n  return (\n    <div className='container'>\n      <section className='section'>\n        <h1 className='title'>Uh-oh!! So sorry you are seeing this page.</h1>\n        <p>Most likely you have entered invalid endpoints data.</p>\n        <p>Ensure that you endpoint data are in this example format.</p>\n        <p> \"buttons: [10, 38, -13, -18], bars: [62, 250, 49], limit: 230\"</p>\n      </section>\n    </div>\n  );\n};\n\nexport default ErrorPage;\n","import React from 'react';\nimport './App.css';\nimport ProgressBars from './components/progressBars';\nimport { validateData } from './validation/validateEndpoint';\nimport ErrorPage from './components/errorPage';\n\nfunction App() {\n  const isValidData = validateData(window.endpointConfig);\n  if (!isValidData || !window.endpointConfig) return <ErrorPage />;\n\n  const { buttons, bars, limit } = window.endpointConfig;\n  const barsData = bars.map((bar, i) => {\n    return { id: `${i}`, name: `Progress ${i + 1}`, value: bar };\n  });\n\n  return (\n    <div className='App'>\n      <div className='container'>\n        <ProgressBars buttons={buttons} barsData={barsData} limit={limit} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}